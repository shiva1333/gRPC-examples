// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: ClientStreaming/computeAverageApi/proto/compute.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ComputeServiceClient is the client API for ComputeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ComputeServiceClient interface {
	// Client Streaming
	Compute(ctx context.Context, opts ...grpc.CallOption) (ComputeService_ComputeClient, error)
}

type computeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewComputeServiceClient(cc grpc.ClientConnInterface) ComputeServiceClient {
	return &computeServiceClient{cc}
}

func (c *computeServiceClient) Compute(ctx context.Context, opts ...grpc.CallOption) (ComputeService_ComputeClient, error) {
	stream, err := c.cc.NewStream(ctx, &ComputeService_ServiceDesc.Streams[0], "/ClientStreaming.ComputeService/Compute", opts...)
	if err != nil {
		return nil, err
	}
	x := &computeServiceComputeClient{stream}
	return x, nil
}

type ComputeService_ComputeClient interface {
	Send(*Request) error
	CloseAndRecv() (*Response, error)
	grpc.ClientStream
}

type computeServiceComputeClient struct {
	grpc.ClientStream
}

func (x *computeServiceComputeClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *computeServiceComputeClient) CloseAndRecv() (*Response, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ComputeServiceServer is the server API for ComputeService service.
// All implementations must embed UnimplementedComputeServiceServer
// for forward compatibility
type ComputeServiceServer interface {
	// Client Streaming
	Compute(ComputeService_ComputeServer) error
	mustEmbedUnimplementedComputeServiceServer()
}

// UnimplementedComputeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedComputeServiceServer struct {
}

func (UnimplementedComputeServiceServer) Compute(ComputeService_ComputeServer) error {
	return status.Errorf(codes.Unimplemented, "method Compute not implemented")
}
func (UnimplementedComputeServiceServer) mustEmbedUnimplementedComputeServiceServer() {}

// UnsafeComputeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ComputeServiceServer will
// result in compilation errors.
type UnsafeComputeServiceServer interface {
	mustEmbedUnimplementedComputeServiceServer()
}

func RegisterComputeServiceServer(s grpc.ServiceRegistrar, srv ComputeServiceServer) {
	s.RegisterService(&ComputeService_ServiceDesc, srv)
}

func _ComputeService_Compute_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ComputeServiceServer).Compute(&computeServiceComputeServer{stream})
}

type ComputeService_ComputeServer interface {
	SendAndClose(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type computeServiceComputeServer struct {
	grpc.ServerStream
}

func (x *computeServiceComputeServer) SendAndClose(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *computeServiceComputeServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ComputeService_ServiceDesc is the grpc.ServiceDesc for ComputeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ComputeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ClientStreaming.ComputeService",
	HandlerType: (*ComputeServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Compute",
			Handler:       _ComputeService_Compute_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "ClientStreaming/computeAverageApi/proto/compute.proto",
}
